import os
from dotenv import load_dotenv
import telebot
from telebot.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')

print(f"API_TOKEN: {'–ï—Å—Ç—å' if API_TOKEN else '–ù–ï–¢'}")
print(f"WEBAPP_URL: {WEBAPP_URL}")

bot = telebot.TeleBot(API_TOKEN)

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏)
CHANNELS = {
    'news_ru': 'https://t.me/durov',
    'news_en': 'https://t.me/durov',
    'reviews_ru': 'https://t.me/telegram',
    'reviews_en': 'https://t.me/telegram'
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
TEXTS = {
    'ru': {
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º‚Äë—Ä–µ–ø–ª–∏–∫!',
        'choose_language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:',
        'shop_button': 'üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
        'news_button': 'üì∞ –ù–æ–≤–æ—Å—Ç–∏',
        'reviews_button': '‚≠ê –û—Ç–∑—ã–≤—ã',
        'back_button': 'üîô –ù–∞–∑–∞–¥',
        'language_set': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π'
    },
    'en': {
        'welcome': 'Welcome to the premium replica store!',
        'choose_language': 'Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'shop_button': 'üõç Open Store',
        'news_button': 'üì∞ News',
        'reviews_button': '‚≠ê Reviews',
        'back_button': 'üîô Back',
        'language_set': 'Language set: English'
    }
}

def get_language_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üá∑üá∫ RU", callback_data="lang_ru"),
        InlineKeyboardButton("üá∫üá∏ EN", callback_data="lang_en")
    )
    print("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞")
    return markup

def get_main_menu_keyboard(lang):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞"""
    markup = InlineKeyboardMarkup()
    texts = TEXTS[lang]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º WEBAPP_URL
    if WEBAPP_URL:
        markup.add(InlineKeyboardButton(texts['shop_button'], web_app=WebAppInfo(url=WEBAPP_URL)))
    else:
        markup.add(InlineKeyboardButton(texts['shop_button'], callback_data="no_webapp"))
    
    markup.row(
        InlineKeyboardButton(texts['news_button'], url=CHANNELS[f'news_{lang}']),
        InlineKeyboardButton(texts['reviews_button'], url=CHANNELS[f'reviews_{lang}'])
    )
    print(f"–°–æ–∑–¥–∞–Ω–∞ –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —è–∑—ã–∫–∞: {lang}")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        bot.send_message(
            message.chat.id,
            TEXTS['ru']['choose_language'],
            reply_markup=get_language_keyboard()
        )
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_all_callbacks(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤"""
    print(f"–ü–æ–ª—É—á–µ–Ω callback: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    
    if call.data.startswith('lang_'):
        handle_language_selection(call)
    elif call.data == "no_webapp":
        bot.answer_callback_query(call.id, "WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    else:
        bot.answer_callback_query(call.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {call.data}")

def handle_language_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user_id = call.from_user.id
    lang = call.data.split('_')[1]  # ru –∏–ª–∏ en
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {lang}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    user_languages[user_id] = lang
    texts = TEXTS[lang]
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    bot.answer_callback_query(call.id, texts['language_set'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(call.message, lang)

def show_main_menu(message, lang):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    texts = TEXTS[lang]
    
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —è–∑—ã–∫–µ: {lang}")
    
    try:
        bot.send_message(
            message.chat.id,
            texts['welcome'],
            reply_markup=get_main_menu_keyboard(lang)
        )
        print("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

@bot.message_handler(content_types=['web_app_data'])
def handle_order(message):
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {message.web_app_data.data}")
    data = message.web_app_data.data
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑:\n{data}")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
